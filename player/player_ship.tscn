[gd_scene load_steps=7 format=3 uid="uid://qjxvca13e7ka"]

[ext_resource type="Texture2D" uid="uid://dprxj3gm6ao68" path="res://ship.png" id="1_vnj8m"]
[ext_resource type="Texture2D" uid="uid://cfti1r2pwy2wb" path="res://Assets/Images/Icons/anchor_icon.png" id="3_uh856"]
[ext_resource type="Script" path="res://player/Camera2D.gd" id="4_3hkxc"]

[sub_resource type="GDScript" id="GDScript_5pico"]
script/source = "extends CharacterBody2D

@onready var interaction_screen = $\"../CanvasLayer/InteractionScreen\"
@onready var port_screen = $\"../CanvasLayer/port_screen\"
@onready var combat_scene = $\"../CombatScene\"
@onready var detection_radius = $Detection_Radius
@onready var ship_sprite = $ShipSprite

#+------------------+
#| Ship stat values |
#+------------------+

# Speed
const anchorspeed = 0
const anchor_acceleration = 50000


# Status
var anchored = false
var furled = false
var current_speed = 0
var near_port = false
var current_port = null


func _ready():
	Signals.show_ui.emit()
	Signals.player_ship_changed.connect(ship_changed)


func _physics_process(delta):
	if Player.in_combat:
		return
	
	handle_anchor()
	handle_rotation(delta)
	handle_sails(delta)
	handle_interact()
	move_and_slide()
		
	#Update speed on player UI
	Signals.speed_changed.emit(floor(current_speed/1000.0))


func handle_rotation(delta):
	var turn_delta = Input.get_axis('left', 'right') * (Player.stats['turn_speed'] + Player.modifiers['steering']) * delta
	rotate(turn_delta)


func handle_sails(delta):
	
	if furled:
		if Input.is_action_just_pressed('up'):
			furled = false
		current_speed = move_toward(current_speed, Player.stats['max_furled_speed'], Player.stats['furled_acceleration'] * delta)
	else:
		if Input.is_action_just_pressed('down'):
			furled = true
		current_speed = move_toward(current_speed, (Player.stats['max_speed'] + Player.modifiers['speed']) * Player.crew_modifier, Player.stats['acceleration'] * delta)
		
	if anchored: current_speed = move_toward(current_speed, 0, anchor_acceleration * delta)
	
	velocity = -transform.y * current_speed * delta


func handle_anchor():
	if anchored:
		if Input.is_action_just_pressed('anchor'):
			anchored = false
			furled = true
			$Sprite2D/Anchor.visible = false
	else:
		if Input.is_action_just_pressed('anchor'):
			anchored = true
			$Sprite2D/Anchor.visible = true


func handle_interact():
	if Input.is_action_just_pressed('interact'):
		var bodies = detection_radius.get_overlapping_bodies()
		var ships = []
		
		for body in bodies:
			if body.is_in_group('ai_ship_body'):
				ships.append(body)
		
		if len(ships) > 0:
			interaction_screen.show_interaction_screen(ships, near_port)
		elif near_port:
			port_screen.show_port_screen()


func set_near_port(is_near, port):
	near_port = is_near
	Player.current_port = port


func ship_changed():
	ship_sprite.texture = Player.stats['sprite']
"

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_ru18s"]
radius = 20.0
height = 80.0

[sub_resource type="CircleShape2D" id="CircleShape2D_2jsi1"]

[node name="PlayerShip" type="CharacterBody2D" groups=["Player"]]
collision_mask = 5
script = SubResource("GDScript_5pico")

[node name="ShipSprite" type="Sprite2D" parent="."]
scale = Vector2(5, 5)
texture = ExtResource("1_vnj8m")

[node name="Anchor" type="Sprite2D" parent="ShipSprite"]
visible = false
scale = Vector2(0.025, 0.025)
texture = ExtResource("3_uh856")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, 1)
shape = SubResource("CapsuleShape2D_ru18s")

[node name="Camera2D" type="Camera2D" parent="."]
zoom = Vector2(0.25, 0.25)
script = ExtResource("4_3hkxc")

[node name="cannonRight" type="Marker2D" parent="." groups=["Player_cannons"]]
position = Vector2(30, 0)
scale = Vector2(0.1, 0.1)

[node name="cannonTopRight" type="Marker2D" parent="." groups=["Player_cannons"]]
position = Vector2(30, -20)
rotation = -0.261799
scale = Vector2(0.1, 0.1)

[node name="cannonBottomRight" type="Marker2D" parent="." groups=["Player_cannons"]]
position = Vector2(30, 20)
rotation = 0.261799
scale = Vector2(0.1, 0.1)

[node name="Detection_Radius" type="Area2D" parent="."]
collision_layer = 3
collision_mask = 3

[node name="CollisionShape2D" type="CollisionShape2D" parent="Detection_Radius"]
scale = Vector2(20, 20)
shape = SubResource("CircleShape2D_2jsi1")
